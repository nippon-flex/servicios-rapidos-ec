// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// ORGANIZACIONES Y REGIONES
// ============================================

model Organization {
  id        String   @id @default(cuid())
  nombre    String
  pais      String
  ciudad    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  regiones  Region[]
  usuarios  User[]
  leads     Lead[]

  @@map("organizations")
}

model Region {
  id        String   @id @default(cuid())
  orgId     String
  ciudad    String
  pais      String
  activa    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  organization Organization @relation(fields: [orgId], references: [id])
  leads        Lead[]
  quotes       Quote[]
  orders       Order[]
  usuarios     User[]

  @@map("regions")
}

// ============================================
// CIUDADES (NUEVO)
// ============================================

model City {
  id          String   @id @default(cuid())
  nombre      String   // Quito, Caracas, Lima
  slug        String   @unique // quito, caracas, lima (para URLs)
  pais        String   // Ecuador, Venezuela, Per√∫
  bandera     String?  // üá™üá®, üáªüá™, üáµüá™
  
  // Contacto
  telefono    String
  whatsapp    String
  email       String
  
  // √Åreas de cobertura
  zonas       String[] // ["La Carolina", "Cumbay√°", "Tumbaco"]
  
  // Configuraci√≥n
  activa      Boolean  @default(true)
  timezone    String   @default("America/Guayaquil")
  moneda      String   @default("USD")
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relaciones
  leads       Lead[]
  quotes      Quote[]
  orders      Order[]
  maestros    User[]
  
  @@map("cities")
}

// ============================================
// USUARIOS (MAESTROS Y ADMINS)
// ============================================

enum RolUsuario {
  ADMIN
  MAESTRO
}

model User {
  id             String      @id @default(cuid())
  clerkId        String?     @unique
  nombre         String
  email          String?
  telefono       String?
  ci             String?
  rol            RolUsuario  @default(MAESTRO)
  organizationId String
  regionId       String?
  cityId         String?
  especialidades String[]
  cuentaBanco    String?
  activo         Boolean     @default(true)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relaciones
  organization      Organization  @relation(fields: [organizationId], references: [id])
  region            Region?       @relation(fields: [regionId], references: [id])
  city              City?         @relation(fields: [cityId], references: [id])
  ordenesAsignadas  Order[]
  pagos             MaestroPago[]

  @@map("users")
}

// ============================================
// SERVICIOS
// ============================================

model Service {
  id          String   @id @default(cuid())
  nombre      String
  descripcion String
  icono       String?
  slug        String   @unique
  precioBase  Decimal  @default(0) @db.Decimal(10, 2)
  unidad      String   @default("servicio")
  activo      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  leads Lead[]

  @@map("services")
}

// ============================================
// LEADS (SOLICITUDES)
// ============================================

enum EstadoLead {
  NUEVO
  CONTACTADO
  COTIZADO
  RECHAZADO
  CONVERTIDO
}

model Lead {
  id                String      @id @default(cuid())
  codigo            String      @unique
  organizationId    String
  regionId          String?
  cityId            String?
  serviceId         String
  clienteNombre     String
  clienteTelefono   String
  clienteEmail      String?
  direccion         String
  descripcion       String
  urgencia          String      @default("normal")
  fotos             String[]
  estado            EstadoLead  @default(NUEVO)
  notas             String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relaciones
  organization Organization @relation(fields: [organizationId], references: [id])
  region       Region?      @relation(fields: [regionId], references: [id])
  city         City?        @relation(fields: [cityId], references: [id])
  service      Service      @relation(fields: [serviceId], references: [id])
  cotizaciones Quote[]

  @@map("leads")
}

// ============================================
// COTIZACIONES
// ============================================

enum EstadoQuote {
  BORRADOR
  ENVIADA
  APROBADA
  RECHAZADA
  CONVERTIDA
}

model Quote {
  id             String      @id @default(cuid())
  codigo         String      @unique
  leadId         String
  regionId       String?
  cityId         String?
  subtotal       Decimal     @default(0) @db.Decimal(10, 2)
  impuesto       Decimal     @default(0) @db.Decimal(10, 2)
  total          Decimal     @default(0) @db.Decimal(10, 2)
  anticipo       Decimal     @default(0) @db.Decimal(10, 2)
  saldo          Decimal     @default(0) @db.Decimal(10, 2)
  validaHasta    DateTime?
  estado         EstadoQuote @default(BORRADOR)
  mensajeIA      String?
  notas          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relaciones
  lead         Lead        @relation(fields: [leadId], references: [id], onDelete: Cascade)
  region       Region?     @relation(fields: [regionId], references: [id])
  city         City?       @relation(fields: [cityId], references: [id])
  items        QuoteItem[]
  orden        Order?

  @@map("quotes")
}

model QuoteItem {
  id              String   @id @default(cuid())
  quoteId         String
  descripcion     String
  cantidad        Decimal  @db.Decimal(10, 2)
  precioUnitario  Decimal  @db.Decimal(10, 2)
  total           Decimal  @db.Decimal(10, 2)
  createdAt       DateTime @default(now())

  // Relaciones
  quote Quote @relation(fields: [quoteId], references: [id], onDelete: Cascade)

  @@map("quote_items")
}

// ============================================
// √ìRDENES DE TRABAJO
// ============================================

enum EstadoOrder {
  ANTICIPO_PENDIENTE
  ANTICIPO_PAGADO
  EN_EJECUCION
  FINALIZADA
  CERRADA
}

model Order {
  id             String      @id @default(cuid())
  codigo         String      @unique
  quoteId        String      @unique
  regionId       String?
  cityId         String?
  maestroId      String?
  costoMaestro   Decimal     @default(0) @db.Decimal(10, 2)
  margen         Decimal     @default(0) @db.Decimal(10, 2)
  estado         EstadoOrder @default(ANTICIPO_PENDIENTE)
  fechaInicio    DateTime?
  fechaFin       DateTime?
  fotosAntes     String[]
  fotosDurante   String[]
  fotosDespues   String[]
  notasInternas  String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relaciones
  quote        Quote         @relation(fields: [quoteId], references: [id])
  region       Region?       @relation(fields: [regionId], references: [id])
  city         City?         @relation(fields: [cityId], references: [id])
  maestro      User?         @relation(fields: [maestroId], references: [id])
  pagos        Payment[]
  garantias    WarrantyCase[]

  @@map("orders")
}

// ============================================
// PAGOS
// ============================================

enum TipoPago {
  ANTICIPO
  SALDO
  ADICIONAL
}

enum MetodoPago {
  TRANSFERENCIA
  EFECTIVO
  OTRO
}

model Payment {
  id             String      @id @default(cuid())
  orderId        String
  tipo           TipoPago
  metodo         MetodoPago
  monto          Decimal     @db.Decimal(10, 2)
  comprobanteUrl String?
  referencia     String?
  validado       Boolean     @default(false)
  validadoPor    String?
  fecha          DateTime    @default(now())
  createdAt      DateTime    @default(now())

  // Relaciones
  order Order @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model MaestroPago {
  id             String      @id @default(cuid())
  maestroId      String
  orderId        String?
  monto          Decimal     @db.Decimal(10, 2)
  metodo         MetodoPago
  referencia     String?
  comprobanteUrl String?
  notas          String?
  fecha          DateTime    @default(now())
  createdAt      DateTime    @default(now())

  // Relaciones
  maestro User @relation(fields: [maestroId], references: [id])

  @@map("maestros_pagos")
}

// ============================================
// GARANT√çAS
// ============================================

enum EstadoGarantia {
  REPORTADA
  EN_REVISION
  APROBADA
  RECHAZADA
  EN_REPARACION
  RESUELTA
}

model WarrantyCase {
  id               String         @id @default(cuid())
  codigo           String         @unique
  orderId          String
  clienteReporte   String
  fotos            String[]
  fechaReporte     DateTime       @default(now())
  cubierta         Boolean?
  motivoRechazo    String?
  ordenReparacion  String?
  resolucion       String?
  estado           EstadoGarantia @default(REPORTADA)
  resueltaEn       DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Relaciones
  order Order @relation(fields: [orderId], references: [id])

  @@map("warranty_cases")
}

// ============================================
// AUDITOR√çA
// ============================================

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  accion    String
  entidad   String
  entidadId String?
  detalles  String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}